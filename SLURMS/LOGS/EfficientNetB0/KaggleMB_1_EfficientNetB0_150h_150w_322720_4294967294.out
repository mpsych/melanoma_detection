Tue 27 Feb 2024 05:37:40 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB0
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb0 (Functional)  (None, 1280)              4049571   
_________________________________________________________________
dense (Dense)                (None, 512)               655872    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 4,840,357
Trainable params: 789,250
Non-trainable params: 4,051,107
_________________________________________________________________
Fitting KaggleMB_aug_EfficientNetB0_150h_150w_None model...
model_name: KaggleMB_aug_EfficientNetB0_150h_150w_None
Epoch: 1 loss: 0.6879 accuracy: 0.5444 val_loss: 0.7135 val_accuracy: 0.4337
Epoch: 2 loss: 0.6748 accuracy: 0.5904 val_loss: 0.7301 val_accuracy: 0.4337
Epoch: 3 loss: 0.6683 accuracy: 0.6115 val_loss: 0.7389 val_accuracy: 0.4337
Epoch: 4 loss: 0.6670 accuracy: 0.6066 val_loss: 0.7457 val_accuracy: 0.4337
Epoch: 5 loss: 0.6625 accuracy: 0.6118 val_loss: 0.7322 val_accuracy: 0.4337
Epoch: 6 loss: 0.6629 accuracy: 0.6118 val_loss: 0.7450 val_accuracy: 0.4337
Epoch: 7 loss: 0.6594 accuracy: 0.6129 val_loss: 0.7420 val_accuracy: 0.4337
Epoch: 8 loss: 0.6555 accuracy: 0.6132 val_loss: 0.7638 val_accuracy: 0.4337
Epoch: 9 loss: 0.6522 accuracy: 0.6155 val_loss: 0.7999 val_accuracy: 0.4337
Epoch: 10 loss: 0.6474 accuracy: 0.6145 val_loss: 0.6704 val_accuracy: 0.6326
Epoch: 11 loss: 0.6380 accuracy: 0.6312 val_loss: 0.7125 val_accuracy: 0.4337
Epoch: 12 loss: 0.6374 accuracy: 0.6346 val_loss: 0.7355 val_accuracy: 0.4337
Epoch: 13 loss: 0.6305 accuracy: 0.6409 val_loss: 0.6518 val_accuracy: 0.6515
Epoch: 14 loss: 0.6330 accuracy: 0.6417 val_loss: 0.7639 val_accuracy: 0.4337
Epoch: 15 loss: 0.6256 accuracy: 0.6500 val_loss: 0.6203 val_accuracy: 0.6667
Epoch: 16 loss: 0.6194 accuracy: 0.6597 val_loss: 0.6908 val_accuracy: 0.4811
Epoch: 17 loss: 0.6167 accuracy: 0.6552 val_loss: 0.7432 val_accuracy: 0.4375
Epoch: 18 loss: 0.6139 accuracy: 0.6689 val_loss: 0.6798 val_accuracy: 0.5511
Epoch: 19 loss: 0.6197 accuracy: 0.6483 val_loss: 0.6971 val_accuracy: 0.5038
Epoch: 20 loss: 0.6113 accuracy: 0.6671 val_loss: 0.6893 val_accuracy: 0.5152
Job ended!
